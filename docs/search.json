[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GIT Seminar",
    "section": "",
    "text": "Jacob Alderson’s seminar work In Geographic Information Technologies, In the Department of Environmental, Geoinformatic and Urban Planning Sciences in Ben Gurion University of the Negev."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "GIT Seminar",
    "section": "Education",
    "text": "Education\nUniversity of California, San Diego | San Diego, CA PhD in Mathematics | Sept 2011 - June 2015\nMacalester College | St. Paul MA B.A in Economics | Sept 2007 - June 2011"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "GIT Seminar",
    "section": "Experience",
    "text": "Experience\nWengo Analytics | Head Data Scientist | April 2018 - present\nGeoScynce | Chief Analyst | Sept 2012 - April 2018"
  },
  {
    "objectID": "index.html#title",
    "href": "index.html#title",
    "title": "GIT Seminar",
    "section": "Title",
    "text": "Title\n“SpatioTemporal Analysis of Summer Land Surface Temperature in New York City’s Synthetic Turf Fields (2013-2022): Integrating Landsat 8 and Weather Station Data, Empowered by Machine Learning Techniques”\nSubtitle (if applicable)"
  },
  {
    "objectID": "index.html#author",
    "href": "index.html#author",
    "title": "GIT Seminar",
    "section": "Author",
    "text": "Author\nJacob Alderson’s seminar Work In Geographic Information Technologies.\nMaster of Arts (or Science) in Your Program\nYour University Name"
  },
  {
    "objectID": "index.html#date",
    "href": "index.html#date",
    "title": "GIT Seminar",
    "section": "Date",
    "text": "Date\nMonth Year"
  },
  {
    "objectID": "index.html#supervised-by",
    "href": "index.html#supervised-by",
    "title": "GIT Seminar",
    "section": "Supervised by",
    "text": "Supervised by\nProfessor Itai Kloog.\nHead of the Geoinformatics Department at Ben Gurion University of the Negev."
  },
  {
    "objectID": "index.html#word-count",
    "href": "index.html#word-count",
    "title": "GIT Seminar",
    "section": "Word Count",
    "text": "Word Count\nXXXX (optional)"
  },
  {
    "objectID": "index.html#acknowledgments-optional",
    "href": "index.html#acknowledgments-optional",
    "title": "GIT Seminar",
    "section": "Acknowledgments (optional)",
    "text": "Acknowledgments (optional)\nYou can include your acknowledgments here."
  },
  {
    "objectID": "index.html#git-seminar",
    "href": "index.html#git-seminar",
    "title": "GIT Seminar",
    "section": "GIT Seminar",
    "text": "GIT Seminar\nJacob Alderson’s seminar Work In Geographic Information Technologies, In the Department of Environmental Sciences, Geoinformatics and Urban Planning in Ben Gurion University of the Negev."
  },
  {
    "objectID": "index.html#spatiotemporal-analysis-of-summer-land-surface-temperature-in-new-york-citys-synthetic-turf-fields-2013-2022-integrating-landsat-8-and-weather-station-data-empowered-by-machine-learning-techniques.-1",
    "href": "index.html#spatiotemporal-analysis-of-summer-land-surface-temperature-in-new-york-citys-synthetic-turf-fields-2013-2022-integrating-landsat-8-and-weather-station-data-empowered-by-machine-learning-techniques.-1",
    "title": "GIT Seminar",
    "section": "SpatioTemporal Analysis of Summer Land Surface Temperature in New York City’s Synthetic Turf Fields (2013-2022): Integrating Landsat 8 and Weather Station Data, Empowered by Machine Learning Techniques.",
    "text": "SpatioTemporal Analysis of Summer Land Surface Temperature in New York City’s Synthetic Turf Fields (2013-2022): Integrating Landsat 8 and Weather Station Data, Empowered by Machine Learning Techniques."
  },
  {
    "objectID": "index.html#acknowledgments",
    "href": "index.html#acknowledgments",
    "title": "GIT Seminar",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nI thank Professor Itai Kloog and ScD, MSc, Homero Harari from the Icahn School of Medicine at Mount Sinai, who gave me the privilege and the honor to work with them this year in academic research and guided me in my first steps in the academic world."
  },
  {
    "objectID": "Introduction.html",
    "href": "Introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Turf_Fields_Data.html",
    "href": "Turf_Fields_Data.html",
    "title": "Turf Fields Data",
    "section": "",
    "text": "# Load data for New York Turf Fields 1\nnyc1 <- read.csv(\"New York Turf Fields 1.csv\")\n\n# Display the first few rows of the dataset\nhead(nyc1)\n\n                   Location ID\n1           Bronx Park East  1\n2               Haffen Park  2\n3 John Mullaly Park (North)  3\n4 John Mullaly Park (South)  4\n5          Marble Hill Park  5\n6           Pelham Bay Park  6\n\n\nUsing Google Earth, I added longitude and latitude coordinates to each artificial turf grass field, as seen in the following table.\n\n# Load data for New York Turf Fields 2\nnyc2 <- read.csv(\"New York Turf Fields 2.csv\")\n\n# Display the first few rows of the dataset\nhead(nyc2)\n\n                   Location Latitude Longitude ID\n1           Bronx Park East 40.85862 -73.87169  1\n2               Haffen Park 40.87307 -73.83959  2\n3 John Mullaly Park (North) 40.83388 -73.92410  3\n4 John Mullaly Park (South) 40.83326 -73.92445  4\n5          Marble Hill Park 40.87735 -73.90828  5\n6           Pelham Bay Park 40.87006 -73.79119  6\n\n\nTo visualize the data, I created a map of the different artificial turf grass fields around New York.\n\nlibrary(leaflet)\nlibrary(dplyr)\n\n# Create a leaflet map\nleaflet(data = nyc2) %>%\n  addTiles() %>%\n  addMarkers(\n    ~Longitude, ~Latitude,\n    popup = ~paste(\"Location: \", Location, \"<br>ID: \", ID)\n  )"
  },
  {
    "objectID": "Bibliography.html",
    "href": "Bibliography.html",
    "title": "",
    "section": "",
    "text": "USGS. (n.d.). Landsat 8. https://www.usgs.gov/landsat-missions/landsat-8\nWang, T., Shi, J., Ma, Y., Husi, L., Comyn‐Platt, E., Ji, D., ... & Xiong, C. (2019). Recovering land surface temperature under cloudy skies considering the solar‐cloud‐satellite geometry: Application to MODIS and Landsat‐8 data. Journal of Geophysical Research: Atmospheres, 124(6), 3401-3416.‏\ndata sources:\nNew York City Department of Parks & Recreation. (n.d.). Synthetic Turf Lead Results. Wayback Machine. web.archive.org/web/20180203033627/https://www.nycgovparks.org/news/reports/synthetic-turf-tests\nNational Centers for Environmental Information. (n.d.). Global historical climatology network daily (GHCNd). https://www.ncei.noaa.gov/products/land-based-station/global-historical-climatology-network-daily\nEarth Engine Data Catalog. (n.d.). USGS Landsat 8 level 2, collection 2, tier 1. https://developers.google.com/earth-engine/datasets/catalog/LANDSAT_LC08_C02_T1_L2"
  },
  {
    "objectID": "Stations_Data.html",
    "href": "Stations_Data.html",
    "title": "Weather stations data",
    "section": "",
    "text": "The Global Historical Climatology Network Daily (GHCNd) is an online database of daily climate summaries from land surface monitoring stations worldwide. The database contains records from over 100,000 stations in 180 countries and territories, containing temperature, precipitation, snowfall, and snow depth data. (National Centers for Environmental Information. (n.d.))\nI have downloaded two databases containing the following data:\n\nStations: Station ID, latitude, longitude, elevation, State (if applicable), and Station name.\nInventory: Station ID, latitude, longitude, element type, and begin/end date.\n\nAfter downloading the databases from the GHCNd website, the data needed to be converted from text to CSV format. In addition, the relevant columns from each database were selected.\n\nlibrary(dplyr)\n\ndata_stations <- read.table(\"ncei.noaa.gov_pub_data_ghcn_daily_ghcnd-stations.txt\", header = FALSE, fill = TRUE, stringsAsFactors = FALSE)\n\nstation_data <- data_stations %>%\n  select(V1, V2, V3) %>%\n  setNames(c(\"Station_ID\", \"Latitude\", \"Longitude\")) %>%\n  as.data.frame()\n\nstation_data %>%\n  write.csv(\"station_data.csv\", row.names = FALSE)\n\n\nlibrary(dplyr)\n\ndata_inventory <- read.table(\"ncei.noaa.gov_pub_data_ghcn_daily_ghcnd-inventory.txt\", stringsAsFactors = FALSE)\n\ninventory_data <- data_inventory %>%\n  select(V1, V2, V3, V4, V5, V6) %>%\n  setNames(c(\"Station_ID\", \"Latitude\", \"Longitude\", \"Data_Type\", \"Start_Year\", \"End_Year\")) %>%\n  as.data.frame()\n\ninventory_data %>%\n  write.csv(\"Inventory_data.csv\", row.names = FALSE)\n\nThese two databases were used to classify and filter weather stations with temperature-averaged data. Also, it was necessary to classify and filter stations that collected data from the summers of 2013 to 2022; the same stations also had to exist in 2013 when the Landsat 8 satellite was flown into space.\n\nlibrary(dplyr)\n\ninventory_data <- read.csv(\"Inventory_Data.csv\", stringsAsFactors = FALSE)\nstation_data <- read.csv(\"station_data.csv\", stringsAsFactors = FALSE)\n\nstations_with_data_in_2023 <- inventory_data %>%\n  filter(Data_Type == \"TAVG\") %>%\n  inner_join(station_data, by = \"Station_ID\") %>%\n  mutate(Start_Year = as.numeric(Start_Year), End_Year = as.numeric(End_Year)) %>%\n  filter(End_Year >= 2023, Start_Year < 2013)\n\nstations_with_data_in_2023 %>%\nwrite.csv(\"stations_with_data_in_2023.csv\", row.names = FALSE)\n\nHere is the data frame containing all the necessary data for this seminar.\n\nstations_with_data_in_2023 = read.csv(\"stations_with_data_in_2023.csv\")\nglimpse(stations_with_data_in_2023)\n\nRows: 4,425\nColumns: 8\n$ Station_ID  <chr> \"AE000041196\", \"AEM00041194\", \"AEM00041217\", \"AEM00041218\"…\n$ Latitude.x  <dbl> 25.3330, 25.2550, 24.4330, 24.2620, 36.7167, 30.5667, 28.0…\n$ Longitude.x <dbl> 55.5170, 55.3640, 54.6510, 55.6090, 3.2500, 2.8667, 9.6331…\n$ Data_Type   <chr> \"TAVG\", \"TAVG\", \"TAVG\", \"TAVG\", \"TAVG\", \"TAVG\", \"TAVG\", \"T…\n$ Start_Year  <int> 1944, 1983, 1983, 1994, 1943, 1957, 1965, 1995, 1995, 1943…\n$ End_Year    <int> 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023…\n$ Latitude.y  <dbl> 25.3330, 25.2550, 24.4330, 24.2620, 36.7167, 30.5667, 28.0…\n$ Longitude.y <dbl> 55.5170, 55.3640, 54.6510, 55.6090, 3.2500, 2.8667, 9.6331…"
  },
  {
    "objectID": "Landsat8.html",
    "href": "Landsat8.html",
    "title": "Retrieving and extracting Land Surface Temperature (LST) values from Landsat 8 satellite",
    "section": "",
    "text": "To make the code function properly, I utilized a polygon layer named NEMIA that encompasses the eastern coast of North America. Additionally, I transformed the table of synthetic fields with corresponding coordinates into a point layer using ARC GIS PRO.\nFirst, the code adds the layers representing NEMIA (in red) and Fields (in green) to the map. Then, it centers the view on NEMIA, and retrieves Landsat 8 imagery for June 2018 within NEMIA. To ensure the accuracy of data and eliminate cloud and shadow effects from Landsat imagery, a cloud masking function (masking) is introduced. This step is crucial in generating reliable temperature data, as clouds significantly affect remotely sensed LST by absorbing almost all surface-emitted thermal energy. Due to cloud contamination, most LST products derived from various algorithms have spatial discontinuities, as highlighted by Wang et al. (2019) in their research.\nNext, the code calculates a cloud-free mean composite image using Landsat data and clips it to the NEMIA boundaries. Scaling factors are then applied to the optical and thermal bands to improve data quality and make it suitable for temperature analysis based on remote sensing physics (Earth Engine Data Catalog. (n.d.)). The land surface temperature (LST) is obtained from the thermal band of the Landsat imagery and converted into degrees Celsius. It is then displayed as a color-coded layer (LST1) on the map, visually representing the LST distribution.\nTo enhance the focus on synthetic grass and minimize the impact of the surrounding urban environment, the resolution for temperature data is set to 30 meters before projecting LST data. LST values are extracted from the reprojected data for each field. Finally, extracted LST data is exported as a CSV file.\n\n\n// The shape files need to be uploaded to Google Earth Engine.\nvar NEMIA = NEMIA Shape File\nvar Fields = Fields Shape File\n\nMap.addLayer(NEMIA, { color: 'red' });\nMap.centerObject(NEMIA, 4);\nMap.addLayer(Fields, { color: 'green' }, 'Fields');\n\nvar landsat8 = ee.ImageCollection(\"LANDSAT/LC08/C02/T1_L2\");\nvar landsat8Filtered = landsat8.filterBounds(NEMIA);\nvar landsat8DateFiltered = landsat8Filtered.filterDate('2018-06-01', '2018-06-30');\n\n// Cloud masking function\nvar masking = function (img) {\n  var cloudshadowBitmask = (1 << 4);\n  var cloudshadowmask = (1 << 3);\n  var cirus = (1 << 2);\n  var qa = img.select('QA_PIXEL');\n  var maskshadow = qa.bitwiseAnd(cloudshadowBitmask).eq(0);\n  var maskcloud = qa.bitwiseAnd(cloudshadowmask).eq(0);\n  var maskValue2 = qa.bitwiseAnd(cirus).eq(0); // Add bit mask for value 2\n  var mask = maskshadow.and(maskcloud).and(maskValue2); // Include new mask\n  return img.updateMask(mask);\n};\n\nvar cloudFreeImage = landsat8DateFiltered.sort('CLOUD_COVER_LAND')\n  .map(masking)\n  .mean();\n\nvar clippedImage = cloudFreeImage.clip(NEMIA);\n\n// Apply scaling factors\nvar scale = function applyScaleFactors(image) {\n  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);\n  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);\n  return image.addBands(opticalBands, null, true)\n    .addBands(thermalBands, null, true);\n};\n\nvar scaledImage = scale(clippedImage);\n\nMap.addLayer(scaledImage);\n\nvar thermalBand = scaledImage.select('ST_B10');\nvar LSTcelcius = thermalBand.subtract(273.15);\nvar LST_Color = { min: 0, max: 30, palette: ['blue', 'limegreen', 'yellow', 'orange'] };\nMap.addLayer(LSTcelcius, LST_Color, 'LST1');\n\n// Set the desired resolution to 30 meters\nvar desiredResolution = 30;\n\n// Reproject LSTcelcius to the desired resolution\nvar LSTcelcius30m = LSTcelcius.reproject({\n  crs: LSTcelcius.projection().crs(),\n  scale: desiredResolution,\n});\n\n// Extract values from LSTcelcius raster to points\nvar extractedDataFields = LSTcelcius30m.reduceRegions({\n  collection: Fields,\n  reducer: ee.Reducer.first(),\n  scale: desiredResolution,\n});\n\n// Export the extracted data to a CSV file\nExport.table.toDrive({\n  collection: extractedDataFields,\n  description: 'Points_Fields_June_2018',\n  folder: 'L8_Points_Fields_Seminar',\n  fileFormat: 'CSV',\n});\n\n\n\n\nFig 1. NEMIA layer with LST values from the code in June 2018."
  },
  {
    "objectID": "Stations_Data_Spatial_Join.html",
    "href": "Stations_Data_Spatial_Join.html",
    "title": "Weather stations Spatial Join",
    "section": "",
    "text": "Figure 2 shows green circles for the artificial turf grass field and red triangles for the weather stations.\n\n\nFinally, a table was created which includes all the fields of artificial turf grass, the closest weather station, and the distance between them.\n\nSpatial_Join =  read.csv(\"Spatial_Join.csv\")\nhead(Spatial_Join)\n\n  ID Latitude Longitude       Dist  Station_ID\n1  1 40.85862 -73.87169 0.07968540 USW00014732\n2  2 40.87307 -73.83959 0.10213630 USW00014732\n3  3 40.83388 -73.92410 0.06990400 USW00014732\n4  4 40.83326 -73.92445 0.06964582 USW00014732\n5  5 40.87735 -73.90828 0.10187164 USW00014732\n6  6 40.87006 -73.79119 0.12711889 USW00014732"
  },
  {
    "objectID": "Weather_Data.html",
    "href": "Weather_Data.html",
    "title": "Weather Data",
    "section": "",
    "text": "ID Latitude Longitude       Dist  Station_ID\n1  1 40.85862 -73.87169 0.07968540 USW00014732\n2  2 40.87307 -73.83959 0.10213630 USW00014732\n3  3 40.83388 -73.92410 0.06990400 USW00014732\n4  4 40.83326 -73.92445 0.06964582 USW00014732\n5  5 40.87735 -73.90828 0.10187164 USW00014732\n6  6 40.87006 -73.79119 0.12711889 USW00014732\n\n\n\ntable(Spatial_Join$Station_ID)\n\n\nUSW00014732 USW00014734 USW00094789 \n         81          11           6 \n\n\nThe National Weather Service website was utilized to gather climatic data for these stations. The findings revealed that the following three stations are:\n\nLAGUARDIA AIRPORT, NY US.\nNEWARK LIBERTY INTERNATIONAL AIRPORT, NJ US.\nJFK INTERNATIONAL AIRPORT, NY US.\n\nOne data frame was created to collect the following climate data in Fahrenheit and in Celsius for each weather station:\n\nMonthly Mean Max Temperature.\nMonthly Mean Min Temperature.\nMonthly Mean Avg.\nMonthly Total Precipitation.\n\n\nlibrary(dplyr)\nWeather_Data = read.csv(\"Weather_Data.csv\")\nglimpse(Weather_Data)\n\nRows: 90\nColumns: 9\n$ Station_ID    <chr> \"USW00014732\", \"USW00014732\", \"USW00014732\", \"USW0001473…\n$ Date          <chr> \"Jun-13\", \"Jul-13\", \"Aug-13\", \"Jun-14\", \"Jul-14\", \"Aug-1…\n$ Max.Temp      <dbl> 81.7, 87.8, 82.1, 80.0, 84.3, 82.1, 78.4, 85.9, 86.4, 81…\n$ Min.Temp      <dbl> 66.4, 74.5, 69.4, 65.0, 69.6, 68.2, 64.1, 72.5, 72.3, 65…\n$ Avg.Temp      <dbl> 74.0, 81.2, 75.8, 72.5, 77.0, 75.1, 71.3, 79.2, 79.3, 73…\n$ Precipitation <dbl> 8.16, 2.80, 1.97, 3.69, 3.99, 3.50, 4.80, 3.54, 1.88, 2.…\n$ Max.Temp.C    <dbl> 27.61111, 31.00000, 27.83333, 26.66667, 29.05556, 27.833…\n$ Min.Temp.C    <dbl> 19.11111, 23.61111, 20.77778, 18.33333, 20.88889, 20.111…\n$ Avg.Temp.C    <dbl> 23.33333, 27.33333, 24.33333, 22.50000, 25.00000, 23.944…"
  },
  {
    "objectID": "Data_Integration_and_Selection.html",
    "href": "Data_Integration_and_Selection.html",
    "title": "Data Integration, Selection, and NA Value Handling",
    "section": "",
    "text": "It is important to ensure that the centralized table has only the necessary columns without any missing values of LST due to clouds, as they are irrelevant. Additionally, we need the date column to be in a proper date format rather than a charter format. This will help us create new date-based columns and perform time-based data analysis.\nAdding the first of the month to each date allows the date column to have a date class, but it is irrelevant to statistical and spatial conclusions.\n\nlibrary(dplyr)\n\nSpatial_Join <- read.csv(\"Spatial_Join.csv\")\nWeather_Data <- read.csv(\"Weather_Data.csv\")\n\nfolder_path <- 'L8/All/'\ncsv_files <- list.files(path = folder_path, pattern = \"*.csv\", full.names = TRUE)\n\ncombined_data <- csv_files %>%\n  lapply(read.csv) %>%\n  bind_rows()\n\nfinal_data <- combined_data %>%\n  left_join(Spatial_Join, by = \"ID\") %>%\n  left_join(Weather_Data, by = c(\"Station_ID\", \"Date\")) %>%\n  select(ID, Lst = first, Date, Precipitation, Max.Temp.C, Min.Temp.C, Avg.Temp.C) %>%\n  mutate(Date = as.Date(paste(\"01\", Date), format = \"%d %b-%y\")) %>%\n  mutate(Month = format(Date, \"%m\")) %>%\n  mutate(Year = format(Date, \"%Y\")) %>%\n  arrange(Date) %>%\n  filter(!is.na(Lst))\n\nglimpse(final_data)\n\nRows: 2,737\nColumns: 9\n$ ID            <int> 2, 47, 75, 33, 17, 69, 92, 84, 50, 16, 35, 81, 82, 12, 5…\n$ Lst           <dbl> 43.12277, 37.72914, 43.83201, 34.40853, 38.75967, 40.277…\n$ Date          <date> 2013-06-01, 2013-06-01, 2013-06-01, 2013-06-01, 2013-06…\n$ Precipitation <dbl> 8.16, 8.16, 8.16, 8.74, 8.74, 8.16, 7.95, 7.95, 8.16, 8.…\n$ Max.Temp.C    <dbl> 27.61111, 27.61111, 27.61111, 27.77778, 27.77778, 27.611…\n$ Min.Temp.C    <dbl> 19.11111, 19.11111, 19.11111, 18.11111, 18.11111, 19.111…\n$ Avg.Temp.C    <dbl> 23.33333, 23.33333, 23.33333, 22.94444, 22.94444, 23.333…\n$ Month         <chr> \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"0…\n$ Year          <chr> \"2013\", \"2013\", \"2013\", \"2013\", \"2013\", \"2013\", \"2013\", …"
  },
  {
    "objectID": "Data_Cleaning.html",
    "href": "Data_Cleaning.html",
    "title": "Data preprocessing and summarization",
    "section": "",
    "text": "library(tidyverse)\n\n\nggplot(final_data, aes(x = Lst)) +\n  geom_histogram(binwidth = 0.5, fill = \"#006400\", color = \"black\") +\n  geom_density(aes(y = ..count.. * 0.5), color = \"blue\", size = 1) +  \nlabs(x = \"LST\", y = \"Frequency\", title = \"Histogram and Density of LST\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 20, face = \"bold\"),\n        axis.title = element_text(size = 14),\n        axis.text = element_text(size = 14))\n\n\n\n\nIn order to account for factors like the urban landscape of New York that can impact Land Surface Temperature (LST), it was decided to employ a method of averaging LST values for each field every month during the summer months spanning from 2013 to 2022. Through this process, it is expected to achieve higher data accuracy. This improved dataset will facilitate more accurate statistical analyses and allow for more meaningful insights from the collected data.\n\nlibrary(dplyr)\nsummer_data <- final_data %>%\n  filter(Lst>20) %>%\n  group_by(Date, Year, Month ) %>%\n  summarise_all(.funs = mean, na.rm = TRUE)  %>%\n  select(-ID) %>%\n  ungroup()\n\nglimpse(summer_data)\n\nRows: 30\nColumns: 8\n$ Date          <chr> \"2013-06-01\", \"2013-07-01\", \"2013-08-01\", \"2014-06-01\", …\n$ Year          <int> 2013, 2013, 2013, 2014, 2014, 2014, 2015, 2015, 2015, 20…\n$ Month         <int> 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6,…\n$ Lst           <dbl> 42.28527, 43.00233, 39.00369, 40.40266, 41.68047, 36.257…\n$ Precipitation <dbl> 8.212245, 2.893056, 2.308367, 3.704694, 4.166020, 3.3493…\n$ Max.Temp.C    <dbl> 27.49376, 31.01157, 27.84977, 26.77098, 29.10374, 27.884…\n$ Min.Temp.C    <dbl> 18.88662, 23.42978, 20.53231, 18.21145, 20.74490, 19.897…\n$ Avg.Temp.C    <dbl> 23.16723, 27.24460, 24.21712, 22.48810, 24.94898, 23.873…"
  },
  {
    "objectID": "Data_Visualisation.html",
    "href": "Data_Visualisation.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Data visualization is essential for processing and drawing conclusions on the data set’s land surface data (LST) throughout the years and the summer months.\nThis code generates box plots visually representing the Land Surface Temperature (LST) data from 2013 to 2022. Box plots are statistical plots that help in understanding the distribution of data. The box plots in this code identify patterns and LST changes over the given period.\nUpon examining the box plots, it was discovered that the Land Surface Temperature (LST) values during 2017, 2018, 2019, and 2021 were lower than the overall median value of LST. This indicates that the land surface temperature was lower during these years compared to the overall dataset. In contrast, LST values from 2013 to 2016 and 2020 to 2022 were higher than the median LST value. Therefore, it is evident that there is a distinct divergence in LST patterns throughout this time frame.\nIn addition to the previously observed temporal patterns, it is noteworthy that certain years, specifically 2015 and 2020, exhibit a notably wide range of temperatures. This stands in stark contrast to the characteristics of other years, such as 2013, 2017, and 2021, which demonstrate a conspicuously narrow temperature range.\n\nlibrary(ggplot2)\nlibrary(ggpubr)\n\nmedian_lst <- median(summer_data$Lst)\n\nggplot(summer_data, aes(x = factor(Year), y = Lst, fill = factor(Year))) +\n  geom_boxplot(outlier.shape = NA, width = 0.6, color = \"gray30\", alpha = 0.7) +\n  geom_point(position = position_jitterdodge(jitter.width = 0.15), aes(color = factor(Year)), size = 3, alpha = 0.6) +\n  geom_hline(yintercept = median_lst, color = \"red\", linetype = \"solid\", size = 1) + \n  labs(title = \"Distribution of Land Surface Temperature Over Years\",\n       x = \"Year\",\n       y = \"Lst\") +\n  theme_pubr() +\n  scale_fill_viridis_d(option = \"C\") +\n  coord_cartesian(ylim = quantile(summer_data$Lst, c(0.05, 0.95))) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),\n        panel.grid.major.x = element_blank(),\n        legend.position = \"bottom\",  \n        legend.title = element_blank(),\n        legend.text = element_text(size = 10),\n        plot.title = element_text(size = 18, face = \"bold\"),\n        axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12))\n\n\n\n\n\nThe Land Surface Temperature (LST) variations across summer months from 2013 to 2022 are visualized in a heatmap with corresponding LST values indicated by a color gradient.\nThe months of August and July have the lowest LST values, which can be attributed to their temporal alignment with the beginning and end of the summer season. July is the hottest month in the dataset, with the highest LST values.\nIn June 2015, the temperature was exceptionally low, with a minimum LST of 28.5 degrees Celsius. In contrast, July 2020 was the hottest month, with a temperature of 46.5 degrees Celsius, almost 1.6 times higher than the lowest temperature recorded in June 2015. This significant temperature difference highlights the dynamic nature of LST patterns.\n\nmy_color_scale <- scale_fill_gradientn(colors = viridis::viridis(10), \n                                       name = \"Lst\", \n                                       breaks = seq(25, 55, by = 5))\n\nggplot(summer_data, aes(x = Year, y = Month, fill = Lst)) +\n  geom_tile(color = \"white\") +\n  geom_text(aes(label = round(Lst, 1)), color = \"black\", size = 3) +  # Add temperature values\n  labs(title = \"Heat Map of Land Surface Temperature Over Months and Years\",\n       x = \"Year\",\n       y = \"Month\") +\n  my_color_scale +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        axis.text.y = element_text(hjust = 1, vjust = 0.5),\n        legend.position = \"right\",\n        plot.title = element_text(size = 18, face = \"bold\"),\n        axis.title = element_text(size = 14),\n        legend.text = element_text(size = 12))\n\n\n\n\n\nThis code generates violin plots that display the distribution of Land Surface Temperature (LST) across different months. These plots offer valuable insights into each month’s central tendency, spread, and overall shape of the LST data distribution.\nJuly stands out as the hottest month in the dataset. This is evident from its higher violin plot shape. Meanwhile, the violin plots for June and August show similar conditions, indicating that these two months share specific temperature characteristics. June and August have broader distributions, which suggest a wider spread of LST values. However, it is notable that August still has slightly higher temperatures than June, as evidenced by its higher upper end of the violin plot.\nFurthermore, the variation in the width of the violin plots is noticeable. While June and August exhibit broader distributions, July presents a narrower one. This suggests that LST values in July tend to cluster more closely around a specific temperature range, whereas June and August display more significant variability.\n\nlibrary(ggplot2)\nlibrary(ggpubr)\n\nggplot(summer_data, aes(x = factor(Month), y = Lst, fill = factor(Month))) +\n  geom_violin(trim = FALSE, scale = \"width\", alpha = 0.7) +\n  geom_jitter(position = position_jitter(0.2), color = \"gray20\", size = 0.5, alpha = 0.5) +\n  labs(title = \"Monthly Distribution of Land Surface Temperature\",\n       x = \"Month\",\n       y = \"Lst\") +\n  theme_pubr() +\n  scale_fill_viridis_d(option = \"C\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),\n        panel.grid.major.x = element_blank(),\n        legend.position = \"bottom\",\n        legend.title = element_blank(),\n        legend.text = element_text(size = 10),\n        plot.title = element_text(size = 18, face = \"bold\"),\n        axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12))"
  },
  {
    "objectID": "June.html",
    "href": "June.html",
    "title": "June",
    "section": "",
    "text": "bla bla"
  }
]