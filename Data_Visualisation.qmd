---
title: "Data Visualization"
---

```{r,echo=FALSE,message=FALSE,warning=FALSE}
library(lubridate)
summer_data = read.csv("summer_data.csv")
```

Data visualization is essential for processing and drawing conclusions on the data set's land surface data (LST) throughout the years and the summer months.

This code generates box plots visually representing the Land Surface Temperature (LST) data from 2013 to 2022. Box plots are statistical plots that help in understanding the distribution of data. The box plots in this code identify patterns and LST changes over the given period.

Upon examining the box plots, it was discovered that the Land Surface Temperature (LST) values during 2017, 2018, 2019, and 2021 were lower than the overall median value of LST. This indicates that the land surface temperature was lower during these years compared to the overall dataset. In contrast, LST values from 2013 to 2016 and 2020 to 2022 were higher than the median LST value. Therefore, it is evident that there is a distinct divergence in LST patterns throughout this time frame.

In addition to the previously observed temporal patterns, it is noteworthy that certain years, specifically 2015 and 2020, exhibit a notably wide range of temperatures. This stands in stark contrast to the characteristics of other years, such as 2013, 2017, and 2021, which demonstrate a conspicuously narrow temperature range.

```{r,warning=FALSE,message=FALSE}
library(ggplot2)
library(ggpubr)

median_lst <- median(summer_data$Lst)

ggplot(summer_data, aes(x = factor(Year), y = Lst, fill = factor(Year))) +
  geom_boxplot(outlier.shape = NA, width = 0.6, color = "gray30", alpha = 0.7) +
  geom_point(position = position_jitterdodge(jitter.width = 0.15), aes(color = factor(Year)), size = 3, alpha = 0.6) +
  geom_hline(yintercept = median_lst, color = "red", linetype = "solid", size = 1) + 
  labs(title = "Distribution of Land Surface Temperature Over Years",
       x = "Year",
       y = "Lst") +
  theme_pubr() +
  scale_fill_viridis_d(option = "C") +
  coord_cartesian(ylim = quantile(summer_data$Lst, c(0.05, 0.95))) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
        panel.grid.major.x = element_blank(),
        legend.position = "bottom",  
        legend.title = element_blank(),
        legend.text = element_text(size = 10),
        plot.title = element_text(size = 18, face = "bold"),
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 12))





```

------------------------------------------------------------------------

The Land Surface Temperature (LST) variations across summer months from 2013 to 2022 are visualized in a heatmap with corresponding LST values indicated by a color gradient.

The months of August and July have the lowest LST values, which can be attributed to their temporal alignment with the beginning and end of the summer season. July is the hottest month in the dataset, with the highest LST values.

In June 2015, the temperature was exceptionally low, with a minimum LST of 28.5 degrees Celsius. In contrast, July 2020 was the hottest month, with a temperature of 46.5 degrees Celsius, almost 1.6 times higher than the lowest temperature recorded in June 2015. This significant temperature difference highlights the dynamic nature of LST patterns.

```{r,warning=FALSE,message=FALSE}
my_color_scale <- scale_fill_gradientn(colors = viridis::viridis(10), 
                                       name = "Lst", 
                                       breaks = seq(25, 55, by = 5))

ggplot(summer_data, aes(x = Year, y = Month, fill = Lst)) +
  geom_tile(color = "white") +
  geom_text(aes(label = round(Lst, 1)), color = "black", size = 3) +  # Add temperature values
  labs(title = "Heat Map of Land Surface Temperature Over Months and Years",
       x = "Year",
       y = "Month") +
  my_color_scale +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.text.y = element_text(hjust = 1, vjust = 0.5),
        legend.position = "right",
        plot.title = element_text(size = 18, face = "bold"),
        axis.title = element_text(size = 14),
        legend.text = element_text(size = 12))
```

------------------------------------------------------------------------

This code generates violin plots that display the distribution of Land Surface Temperature (LST) across different months. These plots offer valuable insights into each month's central tendency, spread, and overall shape of the LST data distribution.

July stands out as the hottest month in the dataset. This is evident from its higher violin plot shape. Meanwhile, the violin plots for June and August show similar conditions, indicating that these two months share specific temperature characteristics. June and August have broader distributions, which suggest a wider spread of LST values. However, it is notable that August still has slightly higher temperatures than June, as evidenced by its higher upper end of the violin plot.

Furthermore, the variation in the width of the violin plots is noticeable. While June and August exhibit broader distributions, July presents a narrower one. This suggests that LST values in July tend to cluster more closely around a specific temperature range, whereas June and August display more significant variability.

```{r,warning=FALSE,message=FALSE}
library(ggplot2)
library(ggpubr)

ggplot(summer_data, aes(x = factor(Month), y = Lst, fill = factor(Month))) +
  geom_violin(trim = FALSE, scale = "width", alpha = 0.7) +
  geom_jitter(position = position_jitter(0.2), color = "gray20", size = 0.5, alpha = 0.5) +
  labs(title = "Monthly Distribution of Land Surface Temperature",
       x = "Month",
       y = "Lst") +
  theme_pubr() +
  scale_fill_viridis_d(option = "C") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
        panel.grid.major.x = element_blank(),
        legend.position = "bottom",
        legend.title = element_blank(),
        legend.text = element_text(size = 10),
        plot.title = element_text(size = 18, face = "bold"),
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 12))

```
